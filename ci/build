#!/bin/bash

export WORKSPACE=${WORKSPACE:-$(pwd)}
export PATH="$PATH:$WORKSPACE/bin"

git clean -ffdx

source /usr/local/rvm/scripts/rvm
rvm use 2.5.1

set -ex

# From https://github.com/fossas/fossa-cli
fossa_install_script=https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh

target_binary_directory="$WORKSPACE/bin"
temporary_directory="$WORKSPACE/tmp"
repo_list="$WORKSPACE/ci/repo_list"

## Keep a git_sha file so that we don't do unneeded scans
git_sha_file_url=https://artifactory.delivery.puppetlabs.net/artifactory/scratchpad__local/fossa-scan-pe/git_sha_file.txt
original_git_sha_file_path="$temporary_directory/original_git_sha_file.txt"
updated_git_sha_file_path="$temporary_directory/git_sha_file.txt"
repos_in_error="$temporary_directory/repos_in_error"

function fetch_git_sha_file() {
  wget --quiet --tries=3 --output-document="$original_git_sha_file_path" "$git_sha_file_url"
  touch "$original_git_sha_file_path"
}

function upload_git_sha_file() {
  # ARTIFACTORY_API_TOKEN is a secret passed by Jenkins through the environment
  curl --header "X-JFrog-Art-Api:$ARTIFACTORY_API_TOKEN" \
       --upload-file "$updated_git_sha_file_path" \
       $git_sha_file_url
}

function original_git_sha() {
  repo_name=$1
  set +e
  grep "^$repo_name," "$original_git_sha_file_path" | awk -F, '{ print $2 }'
  set -e
}

function new_git_sha() {
  repo_name=$1
  git_sha=$2
  echo "$repo_name,$git_sha" >> "$updated_git_sha_file_path"
}

function remove_git_sha() {
  ## We want to force a re-test of something
  repo_name=$1
  grep --fixed-strings --invert-match \
       "$repo_name," "$updated_git_sha_file_path" > "$updated_git_sha_file_path.new"
  mv "$updated_git_sha_file_path.new" "$updated_git_sha_file_path"
}

function bundle_install_everything() {
  original_directory=$(pwd)
  for gemfile in $(find "$original_directory" -name Gemfile); do
    gemfile_directory=$(dirname $gemfile)
    builtin cd $gemfile_directory
    export BUNDLE_PATH="$gemfile_directory/.bundle/gems"
    export BUNDLE_BIN="$gemfile_directory/.bundle/bin"
    bundle install
  done
  builtin cd $original_directory
}

## Set up lein if needed
function configure_lein() {
  lein_version=${1:-2.9.1}

  if [[ -n $lein_version && -x /usr/local/bin/lein-$lein_version ]]; then
    export LEIN=/usr/local/bin/lein-$lein_version
    return
  fi

  : ===
  : === Info: Installing leiningen version "$lein_version"
  : ===
  lein_source_url=https://raw.githubusercontent.com/technomancy/leiningen/$lein_version/bin/lein
  lein_script_path="$target_binary_directory/lein"
  mkdir --parents "$target_binary_directory"
  curl --fail --insecure --location --output "$lein_script_path" \
       https://raw.githubusercontent.com/technomancy/leiningen/"$lein_version"/bin/lein

  if [[ ! -r $lein_script_path ]]; then
    : === Error: lein curl "$lein_source_url" failed.
    exit 1
  fi

  chmod 755 "$lein_script_path"
  export LEIN=$lein_script_path
}

mkdir --parents "$target_binary_directory"
mkdir --parents "$temporary_directory"

curl -H 'Cache-Control: no-cache' $fossa_install_script > "$target_binary_directory"/install.sh
/bin/bash "$target_binary_directory"/install.sh -b "$target_binary_directory"

hash -r

set +e
# It's OK if this fails. It's nice to have but not essential
fetch_git_sha_file
set -e

while read -r repo_url; do
  : ===
  : === Info: Analyzing "$repo_url"
  : ===
  repo_directory="$WORKSPACE/$(basename "$repo_url" .git)"
  git clone --recursive "$repo_url" "$repo_directory"
  builtin cd "$repo_directory"

  current_sha=$(git rev-parse HEAD)
  former_sha=$(original_git_sha "$repo_url")
  new_git_sha "$repo_url" "$current_sha"
  if [[ "$current_sha" == "$former_sha" ]]; then
    : ===
    : === Info: No git changes in "$repo_url" since last run, no need to re-analyze.
    : ===
    continue
  fi

  if [[ -r project.clj ]]; then
    configure_lein
  fi

  bundle_install_everything

  fossa_log="$temporary_directory/$(basename "$repo_url" .git).log"
  set +e
  fossa init 2>&1 | tee --append "$fossa_log"
  fossa analyze 2>&1 | tee --append "$fossa_log"
  if grep --silent "^FATAL " "$fossa_log"; then
    echo "$repo_url" >> "$repos_in_error"
    remove_git_sha "$repo_url"
  fi
  set -e
  builtin cd "$WORKSPACE"
done < "$repo_list"

set +ex

upload_git_sha_file

if [[ ! -r "$repos_in_error" ]]; then
  exit 0
fi

echo "
=========================
Error Report
=========================
"

while read -r repo_url; do
  echo "======  $repo_url: "
  cat "$temporary_directory/$(basename "$repo_url" .git).log"
  echo -e "\n\n"
done < "$repos_in_error"
exit 1
